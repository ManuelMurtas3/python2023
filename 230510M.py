# -*- coding: utf-8 -*-
"""Copia di Overview of Colaboratory Features

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FvfOISQM4vQPYwAk3Yhwx7n6NXdSGW9B
"""

print('Hello World!') # python 3.10

nome = 'Alice'
print(nome)

eta = 12
print(f'Il mio nome è {nome} ed ho {eta} anni.') #f è una forma di formattazione stringa

print('Il mio nome è ' + nome + ' ed ho ' + str(eta) + ' anni.' ) # can only concatenate str (not "int") to str

print('Il mio nome è' , nome , 'ed ho' , eta , 'anni.' ) # la virgola concatena senza bisogno di convertire il tipo

username = input('Inserisci il tuo nome: ') # variabile che si associa alla funzione input()
print('benvenuto', username)                # stampa 'benvenuto $username'

print(5 + 2) # python opera i numeri anche all'interno di una funzione

print('5' + '2')

print(10 - 2) # sottrazione

print(2 * 8) # moltiplicazione

print(15 / 3.0) # divisione

print(2**3) # potenza

print(8 % 3) # resto della divisione

# intero - int
# float - float
a_int = 5
b_float = -3.12514
print('intero a:', a_int)
print('float b:', b_float)

nome = "Simone"
nome_2 = 'Simone'
print(nome, nome_2)

# stampare la seconda lettera di 'Simone' ---> gli indici di simone sono 012345
print(nome[4])
# print(eta[0]) --> TypeError: 'int' object is not subscriptable

s = 'Ciao, mondo!' # index: 0123456789-10-11-12

# lunghezza di stringa: --> da non confondere con gli indici
print(len(s))

print(s.upper()) # uppercase di una stringa tramite metodo di stringa upper()
print(s.split(',')) # come in excel con i file CSV --> il carattere ',' fa da separatore

# replace cambia il primo parametro con il secondo all'interno della stringa
print(s.replace('mondo','universo'))

# Python tratta i caratteri come stringhe
carattere = 'i'
stringa = 'ciao'
print(type(carattere))
print(type(stringa))

# valori booleani 'bool' : True, False --> attenzione al case-sensitive!
vero = True
falso = False
print(type(vero))

# operatori logici
x = 5
y = 10
z = 7

print(x < y and y > z) # --> True and True = True
print(x < y or y > z) # --> True or True = True
print(not(x < y)) # --> not True = False
print( x > y or (y < z and z > x)) # --> False

# gli operatori aritmetici hanno maggiore priorità a quelli booleani
risultato = (3+4)*2 > 10-5 # --> 14 > 5 --> True
print('risultato:' , risultato)

risultato_2 = 8 % 3 == 2 and 7 // 3 != 1 # --> True and True = True
print('ris_2:' , risultato_2)
print(2*3/4) # da sx verso dx
print(2+3-4)

ris_3 = (2+3)*4 < 20 and not(10/2 == 3)
print('ris_3:' , ris_3)

print(3 == 3.0) # nel confronto si convertono i tipi numerici
print(3 == '3') # nel confronto tra stringa e numero da sempre False

# liste
index_num = [0, 1, 2, 3, 4]
numeri = [1, 2, 3, 4, 5]
nomi = ['Alice', 'Bob' , 'Simone', 'Franco']
lista_mista = [5, 'dado', True, 3.15678]

# stampa il numero della lista numeri all'indice 0
print('primo elemento di numeri:', numeri[0]) 

# sostituire un elemento in una lista:
numeri[2] = 10    # si riassegna un valore nella lista richiamandolo con l'indice
print('lista numeri:', numeri)

# lunghezza di lista con funzione len()
print('La lista numeri è lunga:', len(numeri))

# metodo insert
numeri.insert(2,10) # inserisce alla posizione 2 il numero 10
print(numeri)
print(len(numeri))

# metodo remove
numeri.remove(4) # toglie il numero 4 dalla lista
print(numeri)
numeri.remove(numeri[1])
print('abbiamo tolto il 2', numeri)
del numeri[0] # elimina l'elemento con index 0 dalla lista numeri
print(numeri) # in Python 2.70 era print numeri

#numeri è [10, 10, 5]
numeri_2 = numeri #--> assegno l'indirizzo della lista a numeri_2
numeri_3 = numeri[:] # :) --> assegno gli elementi della lista a numeri_3
numeri.remove(5)
print('numeri:', numeri)
print('numeri_2:', numeri_2)
print('numeri_3:', numeri_3)

#del numeri # like a killer

#pop
numeri_3.pop(2) # tramite l'indice 2, pop stampa l'indice 2 e lo rimuove dalla lista

#sort
numeri = [5,7,8,8,9,12,42,3,7,9,54,-72,-125]
print('lista disordinata:', numeri)
numeri.sort()
print('lista ordinata:', numeri)

# nb: le funzioni che eseguono comandi, ma non tornano nulla sono None
print(numeri.sort()) # come il void su java

'''Le costanti in Python non esistono,
si possono segnalare con lettere maiuscole,
ma non possono essere mutate'''

# solo le tuple sono immutabili
punto = (3, 4)
colore_rgb = (255, 128, 0)

print(punto)
print(punto[1])
punto = (3, 6) # il contenuto di una variabile può essere riassegnato
#punto[0] = 4 --> il contenuto della tupla non può essere mutato
print(punto)

#creazione di una costante artificiosa :)
costante = ('ciao',) # grande Carlo :)
print(type(costante[0])) # per richiamare la costante la si richiama con indice 0

# in lista viene passato il riferimento all' oggetto, nelle tuple viene passata copia dell'oggetto stesso
tupla_1 = (1,2,3)
tupla_2 = tupla_1
print(tupla_2)
tupla_1 = (3,4,5)
print(tupla_2)

# DIZIONARIO
"""Strutture dati che consente di memorizzare un insieme di chiavi - valore"""

diz1 = dict(nome = 'Alice', cognome = 'Antani', anni = 6, citta = 'Firenze')
diz2 = {'nome':'Alice', 'cognome': 'Antani', 'anni': 6, 'citta' : 'Firenze'}

# per accedere agli elementi del dizionario si usa la chiave
print(diz2['nome'])

# modifica del valore associato a una chiave:
diz2['nome'] = 'Alessio'
print('nome:', diz2['nome'])

# aggiunta di coppia k:v
diz2['saldo'] = 32547
print('saldo:',diz2['saldo'])

# stampa una lista delle chiavi del dizionario
print(diz2.keys())

# stampa una lista dei valori del dizionario
print(diz2.values())

# stampare una chiave inesistente
# restituisce la chiave senza dare errore nel caso non esista
diz2.get('chiave') # non esiste --> non stampa nulla
diz2.get('nome') # esiste --> stampa il valore associato alla chiave
print(diz1)

# GLI INSIEMI
'''Struttura Dati che rappresenta
una collezione non ordinata
che non accetta duplicati'''

# due modi per creare un set di dati:
insieme_1 = set([4, 5, 6 ,7, 7, 8])
insieme_2 = {0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 5}
print('insieme 1 :', insieme_1)
print('insieme 2 :', insieme_2)
insieme_3 = {3,1,2,'ciao', False, 3.14, 5}
print('insieme 3 :', insieme_3)

# UNIONE DI INSIEMI
print(insieme_1.union(insieme_2))

# INTERSEZIONE DI INSIEMI
print(insieme_1.intersection(insieme_2))

# DIFFERENZA DI INSIEMI
print(insieme_1.difference(insieme_2))

# DIFFERENZA SIMMETRICA DI INSIEMI (opposto di intersezione)
print(insieme_1.symmetric_difference(insieme_2))

# AGGIUNTA ELEMENTO:
insieme_3.add('new')
print(insieme_3)

# RIMOZIONE ELEMENTO:
insieme_3.remove('new')
print(insieme_3)

# RIMOZIONE ELEMENTO INESISTENTE:
#insieme_3.remove('new') --> KEY ERROR : chiave inesistente
insieme_3.discard('new') # --> se esiste lo elimina, ma se non esiste non da errore
print(insieme_3)


# LUNCHEZZA DI UN INSIEME
print('numeri di elementi in insieme_3:', len(insieme_3))

